
#1.1
import binascii
import base64

def hex_to_b64(h):
    # Convert hex string to binary data
    # binary_data = binascii.unhexlify(h)

    # Convert binary data to Base64
    base64_str = base64.b64encode(binascii.unhexlify(h))

    return base64_str
#1.2
from binascii import hexlify, unhexlify

def xor_bytes(a, b):
    if len(a) != len(b):
        raise ValueError("Cannot xor two unequal length byte strings.")

    result = bytearray(a) 

    for i in range(len(a)): 
        result[i] = a[i] ^ b[i]  

    return bytes(result) 

#1.3
def calc_score(text):
    score = 0
    for char in text.lower():
        if char in FREQ_TABLE:
            score += FREQ_TABLE[char]
    return score

def xor_decrypt(c, key):
    return "".join(chr(byte ^ key) for byte in c)

def try_decrypt_xor(c):
    best_key = None
    best_text = ""
    best_score = float('-inf')

    for key in range(256):
        decrypted_text = xor_decrypt(c, key)
        score = calc_score(decrypted_text)

        if score > best_score:
            best_key = key
            best_text = decrypted_text
            best_score = score

    return best_key, best_text

ciphertext = bytes.fromhex("264f0300190a4f0d06084f1c0a02061f1d06020a1c4f0e010b4f264f0c0e0101001b4f03060a4e")
key, decrypted_message = try_decrypt_xor(ciphertext)
print(f"Key: {key} ('{chr(key)}')")
print("Decrypted message:", decrypted_message)

#1.4
import binascii
import string

def xor_decrypt(data, key):
    """Decrypts data using a single-byte XOR key."""
    return bytes(b ^ key for b in data)

def score_text(text):
    """Scores text based on English letter frequency."""
    common_chars = string.ascii_letters + " "
    return sum(c in common_chars.encode() for c in text)

def detect_xor_encrypted_string(filename):
    """Finds the line in the file that was XOR-encrypted with a single character."""
    with open(filename, 'r', encoding='utf-8') as f:
        lines = f.read().splitlines()

    best_score = 0
    best_plaintext = None
    best_line = None

    for line in lines:
        try:
            data = binascii.unhexlify(line)  # Convert hex string to bytes
        except binascii.Error:
            print(f"Skipping invalid hex string: {line}")
            continue  # Skip lines that are not valid hex

        for key in range(256):  # Try all single-byte XOR keys (0-255)
            decrypted = xor_decrypt(data, key)
            score = score_text(decrypted)

            if score > best_score:
                best_score = score
                best_plaintext = decrypted
                best_line = line

    return best_line, best_plaintext.decode(errors="ignore") if best_plaintext else None

# Run the function
if __name__ == "__main__":
    filename = "xor_strings.txt"
    line, plaintext = detect_xor_encrypted_string(filename)

    if plaintext:
        print("Encrypted Line:", line)
        print("Decrypted Text:", plaintext)
    else:
        print("No XOR-encrypted string found.")

#1.5
from binascii import hexlify, unhexlify

def xor_repeating(m, key):
    # TO-DO: do stuff here
    key_length = len(key)
    encrypted = bytes([m[i] ^ key[i % key_length] for i in range(len(m))])
    return encrypted

#1.6
def hamming_dist(a: bytes, b: bytes) -> int:
    if len(a) != len(b):
        raise ValueError("Byte strings must be of equal length.")
    
    distance = 0
    for byte1, byte2 in zip(a, b):
        diff = byte1 ^ byte2
        distance += bin(diff).count('1')
    
    return distance
