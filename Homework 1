
#1.1
import binascii
import base64

def hex_to_b64(h):
    # Convert hex string to binary data
    # binary_data = binascii.unhexlify(h)

    # Convert binary data to Base64
    base64_str = base64.b64encode(binascii.unhexlify(h))

    return base64_str
#1.2
from binascii import hexlify, unhexlify

def xor_bytes(a, b):
    if len(a) != len(b):
        raise ValueError("Cannot xor two unequal length byte strings.")

    result = bytearray(a) 

    for i in range(len(a)): 
        result[i] = a[i] ^ b[i]  

    return bytes(result) 

#1.3
def num2letter(i):
  return chr(ord('a') + i)

def try_decrypt_xor(c, key):
  plaintext = ""
  for byte in c:
    plaintext += chr(byte ^ key)
  return plaintext

def calc_score(text):
  score = 0
  for char in text.lower():
    if char in FREQ_TABLE:
      score += FREQ_TABLE[char]
  return score

def try_decrypt_xor(c, shift):
  def xor_decrypt(ciphertext, key):
    decrypted_text = ""
    for byte in ciphertext:
      decrypted_text += chr(byte ^ key)
    return decrypted_text

    best_key = None
    best_text = ""
    best_score = 0

    for key in range(256):

      decrypted_text = xor_decrypt(ciphertext, key)
      score = calc_score(decrypted_text)

    if score > best_score:
      best_key = key
      best_text = decrypted_text
      best_score = score

    return best_key, best_text

#1.4
def num2letter(i):
  return chr(ord('a') + i)

def try_decrypt_xor(c, key):
  plaintext = ""
  for byte in c:
    plaintext += chr(byte ^ key)
  return plaintext

def calc_score(text):
  score = 0
  for char in text.lower():
    if char in FREQ_TABLE:
      score += FREQ_TABLE[char]
  return score

def try_decrypt_xor(c, shift):
  def xor_decrypt(ciphertext, key):
    decrypted_text = ""
    for byte in ciphertext:
      decrypted_text += chr(byte ^ key)
    return decrypted_text

    best_key = None
    best_text = ""
    best_score = 0

    for key in range(256):

      decrypted_text = xor_decrypt(ciphertext, key)
      score = calc_score(decrypted_text)

    if score > best_score:
      best_key = key
      best_text = decrypted_text
      best_score = score

    return best_key, best_text

#1.5
from binascii import hexlify, unhexlify

def xor_repeating(m, key):
    # TO-DO: do stuff here
    key_length = len(key)
    encrypted = bytes([m[i] ^ key[i % key_length] for i in range(len(m))])
    return encrypted

#1.6
def hamming_dist(a: bytes, b: bytes) -> int:
    if len(a) != len(b):
        raise ValueError("Byte strings must be of equal length.")
    
    distance = 0
    for byte1, byte2 in zip(a, b):
        diff = byte1 ^ byte2
        distance += bin(diff).count('1')
    
    return distance
